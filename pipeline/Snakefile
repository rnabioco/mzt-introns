shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; ")
from os import path
from glob import glob
import sys

""" Snakemake pipeline for primary expression quanitification """ 

configfile: "config.yaml"
  
DATA = config["DATA"]
SRC = config["SRC"]
DBASES = config["DBASES"]
SPLICE_JUNCTS = config["SPLICE_JUNCTS"]

# The following are all dictionaries that are accessed using functions in 
# the snakemake rules

LIB_MAP = config["LIB_MAP"]
GENOMES = config["GENOMES"]
TRANSCRIPTS = config["TRANSCRIPTS"]
CHROM_SIZES = config["CHROM_SIZES"]
GENOME_DIRS = config["GENOME_DIRS"]

# find all splice junction files (no error if none)
# if no splice junctions have been generated, then run pipeline through
# star mapping. Then rerun with the produced splice junctions

SPLICE_JUNCTS = config["SPLICE_JUNCTS"]
if SPLICE_JUNCTS: 
  # make a string with filenames seperated by whitespace
  SPLICE_JUNCTS = glob(SPLICE_JUNCTS)
  SPLICE_JUNCTS = " ".join(SPLICE_JUNCTS)

SPECIES, SAMPLES, = glob_wildcards(path.join(DATA, 
                    "raw_data",
                    "{species}",
                    "{samples}.fastq.gz"))

print("processing the following libraries")
[print("library {} from species {} from experiment {}".format(x,
                                                              SPECIES[i],
                                                              LIB_MAP[x])) for i, x in enumerate(SAMPLES)]


rule all:
  input:
    expand(path.join(DATA, "salmon", "{species}", "{sample}", "quant.sf"),
            zip, sample = SAMPLES, species = SPECIES),
      
    #### star alignments ####
    expand(path.join(DATA, "star", "logs", "{species}_index_tracking.txt"),
            zip, species = SPECIES),

    expand(path.join(DATA, "star", "{species}", "{sample}_sorted.bam"),
            zip, sample = SAMPLES, species = SPECIES),
    
    expand(path.join(DATA, "star", "{species}", "{sample}_sorted.bam.bai"),
            zip, sample = SAMPLES, species = SPECIES),

    #### IRFinder ####
    #path.join(DBASES, "irf_annotations",
    #"logs", "complete.txt"),
    #expand("{data}/irfinder/{sample}/IRFinder-IR-dir.txt",
    #        data=DATA, sample = SAMPLE),

    #### bigwigs ####
    #expand("{data}/bigwigs/{sample}_{orient}.bw",
    #  data=DATA, sample = SAMPLE, orient = ["fwd", "rev", "rev_neg"]),

    ##### qc ####
    expand(path.join(DATA, "qc", "fastqc", "{species}", "{sample}_fastqc/summary.txt"),
      zip, sample = SAMPLES, species = SPECIES)

include: "rules/qc.snake"    
include: "rules/cutadapt.snake"
include: "rules/primary_expression.snake"
include: "rules/star.snake"
#include: "rules/make_bigwigs.snake"
