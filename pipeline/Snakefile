shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; ")
from os import path
from glob import glob
import sys
import itertools

""" Snakemake pipeline for primary expression quanitification """ 

configfile: "config.yaml"
  
DATA = config["DATA"]
SRC = config["SRC"]
RSRC = config["RSRC"]
DBASES = config["DBASES"]
SPLICE_JUNCTS = config["SPLICE_JUNCTS"]

# The following are all dictionaries that are accessed using functions in 
# the snakemake rules

GENOMES = config["GENOMES"]
TRANSCRIPTS = config["TRANSCRIPTS"]
CHROM_SIZES = config["CHROM_SIZES"]
GENOME_DIRS = config["GENOME_DIRS"]
SALMON_K = config["SALMON_K"]
INTRONS = config["INTRONS"]
EXONS = config["EXONS"]


# find all splice junction files (no error if none)
# if no splice junctions have been generated, then run pipeline through
# star mapping. Then rerun with the produced splice junctions

SPLICE_JUNCTS = config["SPLICE_JUNCTS"]
if SPLICE_JUNCTS: 
  # make a string with filenames seperated by whitespace
  SPLICE_JUNCTS = glob(SPLICE_JUNCTS)
  SPLICE_JUNCTS = " ".join(SPLICE_JUNCTS)


LIB_MAP = {}
EXPTS = []
SPECIES = []
SAMPLES = []

with open('lib_params.tsv', 'r') as f:
    hdr = f.readline()
    for line in f:
        if line.startswith("#"): continue
        fields = line.split()
        LIB_MAP[fields[0]] = fields[1]
        EXPTS.append(fields[1])
        SPECIES.append(fields[2])
        SAMPLES.append(fields[0])

print("processing the following libraries")
[print("library {} from species {} from experiment {}".format(x,
                                                              SPECIES[i],
                                                              LIB_MAP[x])) for i, x in enumerate(SAMPLES)]

SPECIES = "drosophila"
FASTA_TYPE = "eisa"
MSKED_FASTA = "eisa_masked"
T0_SAMPLES = ["SRR5469986", "SRR5469998"]

rule all:
  input: 
    path.join(DBASES, SPECIES, "eisa.fa"),
    path.join(DBASES, SPECIES, "eisa", "eisaR.gtf"),
    path.join(DBASES, SPECIES, "bt2", FASTA_TYPE + ".1.bt2"),

    expand(path.join(DATA, "bt2", SPECIES, "{expt}", FASTA_TYPE, "{sample}.bam"),
      zip,
      sample = SAMPLES, 
      expt = len(SAMPLES) * EXPTS),
    
    expand(path.join(DATA, "bigwigs", SPECIES, "bt2", FASTA_TYPE, "{expt}", "{sample}_{orient}.bw"),
      zip,
      sample = SAMPLES,
      expt = len(SAMPLES) * EXPTS,
      orient = len(SAMPLES) * ["fwd", "rev"]),
    
    #intron mask file
    path.join(DBASES, SPECIES, "bt2", MSKED_FASTA + ".1.bt2"),
    
    expand(path.join(DATA, "bt2", SPECIES, "{expt}", MSKED_FASTA, "{sample}.bam"),
      zip,
      sample = SAMPLES, 
      expt = len(SAMPLES) * EXPTS),

    expand(path.join(DATA, "salmon_bt2_masked", SPECIES, "{expt}",
        MSKED_FASTA, "{sample}", "quant.sf"),
           zip, 
           sample = SAMPLES, 
           expt = len(SAMPLES) * EXPTS) 

include: "rules/qc.snake"    
include: "rules/cutadapt.snake"
include: "rules/primary_expression.snake"
include: "rules/star.snake"
include: "rules/make_bigwigs.snake"
include: "rules/bowtie2.snake"
include: "rules/eisa.snake"
