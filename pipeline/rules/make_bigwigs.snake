
""" rules to generate bigwigs """

rule make_bigwigs:
  input:
    forward = path.join(DATA, "star", "{species}", "{expt}", "{sample}_Signal.Unique.str2.out.bg"),
    reverse = path.join(DATA, "star", "{species}", "{expt}", "{sample}_Signal.Unique.str1.out.bg"),
  output:
    fwd = path.join(DATA, "bigwigs", "{species}", "{expt}", "{sample}_fwd.bw"),
    rev = path.join(DATA, "bigwigs", "{species}", "{expt}", "{sample}_rev.bw"),
    revneg = path.join(DATA, "bigwigs", "{species}", "{expt}", "{sample}_rev_neg.bw"),
  params:
    chroms = lambda wildcards: CHROM_SIZES[wildcards.species],
    job_name = "bigwig.{sample}",
    memory = "select[mem>4] rusage[mem=4]",
  log:
    path.join(DATA, "bigwigs", "logs", "{species}", "{expt}", "{sample}.txt") 
  message:
    "building bigwigs for {wildcards.sample} "
  resources: all_threads=1
  shell:
    """
    awk 'NF != 6' {input.forward} | bedSort stdin {input.forward}.sort
    awk 'NF != 6' {input.reverse} | bedSort stdin {input.reverse}.sort

    bedGraphToBigWig {input.forward}.sort {params.chroms} {output.fwd}
    bedGraphToBigWig {input.reverse}.sort {params.chroms} {output.rev}
    awk '{{$4=$4*-1; print}}' {input.reverse}.sort > {input.reverse}.tmp
    
    bedGraphToBigWig {input.reverse}.tmp {params.chroms} {output.revneg}

    rm {input.reverse}.tmp {input.forward}.sort {input.reverse}.sort
    
    """
