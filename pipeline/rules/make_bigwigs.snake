
""" rules to generate bigwigs """

def _get_bedgraphs(wildcards):
  
  """ lookup global dictionary LIB_MAP via sample
      wildcard and return settings for strand 
      based on experiment definition in config file 
  """
  id = os.path.basename(wildcards.sample)
  if id in LIB_MAP:
     lib_attrs = LIB_MAP[id]
     strand_settings = config[lib_attrs]["stranded"]
  else:
     print("WARNING: no stranded settings found for library: {}".format(id),
       file = sys.stderr)
     strand_settings = ""
  
  bg_fns = []
  bg_basename = path.join(DATA, 
                          "star", 
                          wildcards.species,
                          wildcards.expt)

  if strand_settings == "forward":
    fwd_bg = wildcards.sample + "_Signal.UniqueMultiple.str1.out.bg"
    rev_bg = wildcards.sample + "_Signal.UniqueMultiple.str2.out.bg"
  elif strand_settings == "reverse":
    fwd_bg = wildcards.sample + "_Signal.UniqueMultiple.str2.out.bg"
    rev_bg = wildcards.sample + "_Signal.UniqueMultiple.str1.out.bg"
  else:
    sys.exit("unknown setting for stranded: {}".format(strand_settings))

  bg_fns = [path.join(bg_basename, x) for x in [fwd_bg, rev_bg]]

  return bg_fns

rule make_bigwigs:
  input:
    _get_bedgraphs
  output:
    fwd = path.join(DATA, "bigwigs", "{species}", "{expt}", "{sample}_fwd.bw"),
    rev = path.join(DATA, "bigwigs", "{species}", "{expt}", "{sample}_rev.bw"),
    revneg = path.join(DATA, "bigwigs", "{species}", "{expt}", "{sample}_rev_neg.bw"),
  params:
    chroms = lambda wildcards: CHROM_SIZES[wildcards.species],
    job_name = "bigwig.{sample}",
    memory = "select[mem>4] rusage[mem=4]",
  log:
    path.join(DATA, "bigwigs", "logs", "{species}", "{expt}", "{sample}.txt") 
  message:
    "building bigwigs for {wildcards.sample} "
  resources: all_threads=1
  shell:
    """
    awk 'NF != 6' {input[0]} | bedSort stdin {input[0]}.sort
    awk 'NF != 6' {input[1]} | bedSort stdin {input[1]}.sort

    bedGraphToBigWig {input[0]}.sort {params.chroms} {output.fwd}
    bedGraphToBigWig {input[1]}.sort {params.chroms} {output.rev}
    awk '{{$4=$4*-1; print}}' {input[1]}.sort > {input[1]}.tmp
    
    bedGraphToBigWig {input[1]}.tmp {params.chroms} {output.revneg}

    rm {input[1]}.tmp {input[0]}.sort {input[1]}.sort
    
    """
