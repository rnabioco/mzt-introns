import uuid

""" rules to try to run mmr, don't use until the core dump issue(#4) gets fixed """

#rule fc_introns:
#  input:
#    bam = "{data}/star/{species}/{expt}/{sample}_sorted.bam",
#  output:
#    "{data}/featurecounts/{species}/{expt}/{sample}_intron_counts.tsv",
#  params:
#    intron_count = _intron_settings,
#    job_name = "{sample}.bamcount",
#    memory = "select[mem>8] rusage[mem=8]",
#    annots = lambda wildcards: INTRONS[wildcards.species],
#  log:
#    "{data}/featurecounts/logs/{species}/{expt}/{sample}_intron_summary.txt"
#  threads:
#    12
#  resources: all_threads=12
#  shell:
#    """
#    featureCounts \
#     {params.intron_count} \
#    -F 'SAF' \
#    -a {params.annots} \
#    -o {output} \
#    -T {threads} \
#    {input}
#    """
#
#rule fc_exons:
#  input:
#    bam = "{data}/star/{species}/{expt}/{sample}_sorted.bam",
#  output:
#    "{data}/featurecounts/{species}/{expt}/{sample}_exon_counts.tsv",
#  params:
#    exon_count = _exon_settings,
#    job_name = "{sample}.bamcount",
#    memory = "select[mem>8] rusage[mem=8]",
#    annots = lambda wildcards: EXONS[wildcards.species],
#  log:
#    "{data}/featurecounts/logs/{species}/{expt}/{sample}_exon_summary.txt"
#  threads:
#    12
#  resources: all_threads=12
#  shell:
#    """
#    featureCounts \
#     {params.exon_count} \
#    -F 'SAF' \
#    -a {params.annots} \
#    -o {output} \
#    -T {threads} \
#    {input}
#    """



def _get_strand(wildcards):
  """ lookup global dictionary LIB_MAP via sample
  library and return stranded attribute
  """
  id = os.path.basename(wildcards.sample)
  if id in LIB_MAP:
     lib_attrs = LIB_MAP[id]
     strand_settings = config[lib_attrs]["stranded"]
  else:
     print("WARNING: no strand settings found for library: {}".format(id),
       file = sys.stderr)
     strand_settings = ""

  return strand_settings

def _get_tmp_key(wildcards):
  return str(uuid.uuid4())

rule mmr:
  """ 
  use mmr to try rescuing multimapped reads
  """
  input:
    annots = lambda wildcards: TRANSCRIPTS[wildcards.species],
    bam = "{data}/star/{species}/{expt}/{sample}_sorted.bam",
  output:
    bam = "{data}/star/{species}/{expt}/{sample}_sorted_mmr.bam",
  params:
    job_name = "{sample}.bamrescue",
    stranded = _get_strand,
    tmp = _get_tmp_key, 
    memory = "select[mem>8] rusage[mem=8]",
  log:
    "{data}/star/logs/{species}/{expt}/{sample}_mmr.txt"
  threads:
    4
  resources: all_threads=4
  shell:
    """
    if [ "{params.stranded}" == "reversed" ]
      then
        python3 {SRC}/restrand_gtf.py -i {input.annots} > {input.annots}{params.tmp}".gtf"
      else
        cp {input.annots} {input.annots}{params.tmp}".gtf"
    fi 
 
    samtools sort -@ {threads} -n {input.bam} > {input.bam}".tmp.bam" 
    {MMR} \
      -t {threads} \
      -v \
      -b \
      -a {input.annots}{params.tmp}".gtf" \
      -S \
      -w 50 \
      -I 3 \
      -o {input.bam}".tmp.nosort.bam" \
      {input.bam}".tmp.bam"
    
    samtools sort -@ {threads} {input.bam}".tmp.nosort.bam" > {output.bam} 
    samtools index {output.bam}
    rm {input.annots}{params.tmp}".gtf"
    rm {input.bam}".tmp.nosort.bam"
    #rm {input.bam}".tmp.bam"
    """
