
""" rules for star mapping """

rule star_align:
    """ map reads to genome/transcriptome using STAR 
    STAR_2.5.1b
    """
    input:
      R1 = "{data}/fastq/trimmed/{species}/{sample}_trimmed.fastq.gz",
      idx_dummy_file = path.join("{data}", "star", "logs", "{species}_index_tracking.txt"), 
    output:
      bam = "{data}/star/{species}/{sample}_sorted.bam",
      bai = "{data}/star/{species}/{sample}_sorted.bam.bai",
      bg1 = "{data}/star/{species}/{sample}_Signal.Unique.str1.out.bg",
      bg2 = "{data}/star/{species}/{sample}_Signal.Unique.str2.out.bg"
    params:
      use_sjs =  "yes" if SPLICE_JUNCTS else "no", 
      splice_junctions = SPLICE_JUNCTS if SPLICE_JUNCTS else "none",
      job_name = "star",
      tmpbam = "{data}/star/{species}/{sample}_Aligned.sortedByCoord.out.bam",
      genome = lambda wildcards: GENOME_DIRS[wildcards.species],
      out = "{data}/star/{species}/{sample}_",
      memory = "select[mem>60] rusage[mem=60]",
    log:
      "{data}/star/logs/{species}/{sample}_align.txt"
    message:
      "running star alignments "
    threads:
      12
    resources: all_threads=12
    shell:
      """
      # use bash to conditionally define --sjdbFileChrStartEnd
      
      if [ "{params.use_sjs}" != "no" ]
      then
         sjunctions="--sjdbFileChrStartEnd {params.splice_junctions} "
      else
         sjunctions=""
      fi 

      STAR \
        --genomeDir {params.genome}  \
        --runThreadN {threads} \
        --outBAMsortingThreadN {threads} \
        --readFilesIn {input.R1}  \
        --readFilesCommand gunzip -c \
        --outFileNamePrefix {params.out} \
        --outFilterMultimapNmax 10 --outFilterMismatchNmax 10 --outFilterMismatchNoverReadLmax 0.04 \
        --outSAMmultNmax 1 --outMultimapperOrder Random  --outSAMprimaryFlag AllBestScore \
        --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 \
        --alignSJoverhangMin 8  --alignSJDBoverhangMin 1 --sjdbScore 1 \
        --outReadsUnmapped Fastx --outFilterType BySJout \
        --outSAMtype BAM SortedByCoordinate --outSAMmode Full \
        --limitSjdbInsertNsj=1500000 \
        --outSAMattributes All  --outSAMattrIHstart 0  --outSAMstrandField intronMotif \
        --outWigType bedGraph  --outWigNorm RPM --quantMode GeneCounts \
        $sjunctions

      # add XS tag for non-spliced alignments using awkful script from STAR 
      samtools view -h {params.tmpbam} \
        | awk -v strType=2 -f {SRC}/tagXSstrandedData.awk \
        | samtools view -bS - > {output.bam}
      
      samtools index {output.bam}
      
      rm -f {params.tmpbam}
      """

rule star_idx:
  input:
    lambda wildcards: GENOMES[wildcards.species]
  output:
    path.join("{data}", "star", "logs", "{species}_index_tracking.txt"), 
  params:
    genome_dir = lambda wildcards: GENOME_DIRS[wildcards.species],
    genome = lambda wildcards: GENOMES[wildcards.species],
    transcripts = lambda wildcards: TRANSCRIPTS[wildcards.species],
    job_name = "star_idx",
    memory = "select[mem>65] rusage[mem=65]",
  #log:
  #  path.join(GENOME_DIRS, "logs") 
  message:
    "building star index "
  threads:
    24
  resources: all_threads=24
  shell:
    """
    STAR --runMode genomeGenerate \
      --genomeDir {params.genome_dir}  \
      --genomeFastaFiles {params.genome} \
      --runThreadN {threads} \
      --sjdbGTFfile {params.transcripts} \
      --limitGenomeGenerateRAM 60000000000

    # create dummy file
    touch {output}
    """
