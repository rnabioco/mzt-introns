""" rules for trimming """ 

raw = path.join("{data}", "raw_data")

def _trim_settings(wildcards):
  """ lookup global dictionary LIB_MAP via sample
      wildcard and return settings for cutadapt 
      based on library type definition 
  """
  id = os.path.basename(wildcards.sample)
  if id in LIB_MAP:
     lib_attrs = LIB_MAP[id]
     trim_settings = config[lib_attrs]["trim"]
  else:
     print("WARNING: no trimming settings found for library: {}".format(id),
       file = sys.stderr)
     trim_settings = ""

  return trim_settings

rule cutadapt:
  input:
    path.join(raw, "{species}", "{sample}.fastq.gz"),
  output:
    path.join("{data}", "fastq", "trimmed", "{species}", "{sample}_trimmed.fastq.gz") 
  params:
    settings = _trim_settings,
    job_name = "trim.{sample}",
    memory = "select[mem>4] rusage[mem=4]",
  log:
    path.join("{data}", "fastq", "trimmed", "logs", "{species}", "{sample}.txt") 
  message:
    " trimming illumina adapters" 
  threads:
    1
  resources: all_threads=1
  shell:
    """
    cutadapt \
      -m 18 \
      {params.settings} \
      -o {output} \
      {input} 
    """

